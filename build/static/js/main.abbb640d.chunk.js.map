{"version":3,"sources":["ie18labels/ie18labels.js","components/News/newsList.js","components/News/news.js","App.js","serviceWorker.js","index.js"],"names":["ie18labels","loadingPlaceHolderTxt","topTxt","newTxt","loadMoreTxt","websiteURL","NewsList","props","news","map","hit","index","key","objectID","className","num_comments","points","href","title","upvote","url","author","timeAgo","created_at","API","News","state","hits","isLoading","sortOrder","currentPage","nbPages","order","this","setState","page","fetch","then","response","json","data","orderBy","id","onClick","event","setOrder","pagination","Component","App","Boolean","window","location","hostname","match","commentMark","document","createComment","querySelector","append","ReactDOM","hydrate","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.abbb640d.chunk.js","sourcesContent":["const ie18labels = {\n    loadingPlaceHolderTxt : 'Loading...',\n    topTxt: 'Top',\n    newTxt: 'New',\n    loadMoreTxt: 'Load More',\n    websiteURL: 'https://news.ycombinator.com/'\n}\nexport default ie18labels;","import React from \"react\";\nimport timeAgo from \"node-time-ago\";\nimport ie18labels from \"../../ie18labels/ie18labels\"\n\n\nfunction NewsList(props){\n    const news = props.news;\n    return (\n        <>\n          {news &&\n            news.map((hit, index) =>\n              <div \n              key={hit.objectID} \n              className= {(index!==-1 && index%2===0) ? \"even news-item\" : \"odd news-item\"}>\n                  <p>\n                      <span className=\"news-position\">{hit.num_comments}</span> \n                      <span className=\"upvote\">{hit.points}</span> <a href={hit.objectID} className=\"upvote\" title={ie18labels.upvote}> â–² </a><span className=\"post-title\">{hit.title} \n                      <small> <a className=\"domain\" href={hit.url} title={hit.url}>{hit.url}</a> \n                      by {hit.author} {timeAgo(hit.created_at)} </small> \n                      </span></p>\n              </div>\n            )}\n            \n        </>\n      );\n}\nexport default NewsList;    ","import React, { Component } from \"react\";\nimport NewsList from \"./newsList\";\nimport \"isomorphic-fetch\";\nimport orderBy from \"lodash.orderby\";\nimport ie18labels from \"../../ie18labels/ie18labels\"\n\nconst API = 'https://hn.algolia.com/api/v1/search?hitsPerPage=100&query=';\nconst DEFAULT_QUERY = 'redux';\n\nclass News extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hits: [],\n            isLoading: false,\n            sortOrder: \"points\",\n            currentPage: 1,\n            nbPages: ''\n        }\n    }\n    \n    setOrder(order) {\n        this.setState({ sortOrder: order });\n    }\n    \n    pagination(page) {\n        if (this.state.currentPage < this.state.nbPages) {\n            fetch(API + DEFAULT_QUERY + '&page=' + this.state.currentPage)\n                .then(response => response.json())\n                .then(data => this.setState({\n                    hits: data.hits,\n                    nbPages: data.nbPages,\n                    currentPage: this.state.currentPage + 1\n                }));\n        }\n        \n    }\n    \n    componentDidMount() {\n        this.setState({ isLoading: true });\n        fetch(API + DEFAULT_QUERY)\n            .then(response => response.json())\n            .then(data => {\n                this.setState({ hits: data.hits, isLoading: false, nbPages: data.nbPages })\n            });\n    }\n    \n    render() {\n        const hits = orderBy(this.state.hits, this.state.sortOrder, \"desc\");\n        const { isLoading } = this.state;\n        \n        if (isLoading) {\n            return <p>{ie18labels.loadingPlaceHolderTxt}</p>;\n        }\n        return (\n            <div className=\"newslist\">\n                <div className=\"header-title\">\n                    <div className=\"logo\"><h1 title={ie18labels.websiteURL}>Y</h1></div>\n                    <div className=\"sort-by\">\n                        <a\n                            id={\"test-target\"}\n                            href=\"/#\" title=\"top\"\n                            onClick={(event) => {\n                                this.setOrder('points', event)\n                            }} className={this.state.sortOrder === 'points' ? 'active' : ''}>\n                            {ie18labels.topTxt}\n                        </a> |\n                        <a\n                            href=\"/#\"\n                            title=\"new\"\n                            onClick={(event) => {\n                                this.setOrder('created_at', event)\n                            }} className={this.state.sortOrder === 'created_at' ? 'active' : ''}>\n                            {ie18labels.newTxt}\n                        </a>\n                    </div>\n                </div>\n                <NewsList news={hits}/>\n                <div className={this.state.nbPages > this.state.currentPage ? \"load-more\" : \"hidden\"}>\n                    <a href=\"/#\" onClick={(event) => {\n                        this.pagination(event)\n                    }}> {ie18labels.loadMoreTxt}</a>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default News;\n","import React from 'react';\nimport './App.css';\nimport News from './components/News/news'\n\nfunction App(props) {\n  return (\n      <News/>\n   );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst commentMark = document.createComment('This is inserted before hydrate!!');\ndocument.querySelector(\"#test-target\").append(commentMark);\nReactDOM.hydrate(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}